/**
  ******************************************************************************
  * Copyright (C) 2025 C.Fenard.
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  * GNU General Public License for more details.
  *
  ******************************************************************************
  */
#include "AppHttpSSE.hpp"
#include "FreeRTOS.h"
#include "portable.h"
#include "main.hpp"
#include "lwip/sockets.h"
#include "lwip/ip_addr.h"
#include "task.h"

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cinttypes>
#include <memory>
#include <stdexcept>
#include <system_error>

//#define STD_PRINTF(...) std::printf(__VA_ARGS__);
#define STD_PRINTF(...)

void AppHttpSSE::initializeServer(std::uint32_t ipAddressIn, std::uint16_t port) noexcept
{
  AppHttpSSE::serverIpAddrIn = ipAddressIn;
  AppHttpSSE::serverPort = port;
  {
    BaseType_t status = 0;
    const BaseType_t PASS = 1; /* pdPASS */
    const char webserver_task_name[] = {"HTTP-Main"};
    status = xTaskCreate(AppHttpSSE::doListenService, webserver_task_name,
                         AppHttpSSE::WEBSERVER_TASK_STACK_SIZE, this,
                         AppHttpSSE::WEBSERVER_TASK_PRIORITY, NULL);
    if (PASS != status) {
      ErrorHandler();
    }
  }
}

std::uint32_t AppHttpSSE::convertToOsTicks(uint32_t milliseconds) noexcept
{
  return static_cast<std::uint32_t>((static_cast<std::uint64_t>(milliseconds) * static_cast<std::uint64_t>
                                     (configTICK_RATE_HZ)) / 1000U);
}

void AppHttpSSE::doAcceptService(void *argPtr) noexcept
{
  const std::int32_t sock = *(static_cast<std::int32_t *>(argPtr));
  class AppHttpSSE::Client peer(sock);
  const size_t receive_buffer_length = (1024) * sizeof(char);

  std::setbuf(stdout, nullptr);
  lwip_socket_thread_init();

  try {
    std::unique_ptr<char[], decltype(&vPortFree)> \
    receive_buffer_ptr(static_cast<char *>(pvPortMalloc(receive_buffer_length + 1)), &vPortFree);

    if (nullptr != receive_buffer_ptr) {
      receive_buffer_ptr[0] = static_cast<char>('\0');
    }
    else {
      throw std::runtime_error("pvPortMalloc() failed");
    }
    {
      struct sockaddr_in s_name_in = {sizeof(s_name_in), AF_INET, 0, {0}, {0, 0, 0, 0, 0, 0, 0, 0}};
      uint32_t s_name_in_size = sizeof(s_name_in);

      if (0 <= lwip_getpeername(peer.sock, reinterpret_cast<struct sockaddr *>(&s_name_in), &s_name_in_size)) {
        peer.setInfo(s_name_in.sin_addr.s_addr, s_name_in.sin_port);
      }
    }
    peer.infos();
    {
      const std::int32_t count = lwip_recv(sock, receive_buffer_ptr.get(), receive_buffer_length, 0);
      STD_PRINTF("\n%" PRIi32 " >>> %" PRIi32 " <<<\n", sock, count)
      if (0 < count) {
        receive_buffer_ptr[count] = '\0';
        STD_PRINTF("\n%" PRIi32 " >>>%s<<<\n", sock, receive_buffer_ptr.get())
      }
      else {
        peer.close();
        peer.infos();
        std::printf("AppHttpSSE::doAcceptService(): %" PRIi32 "\n", count);
        throw std::runtime_error("lwip_recv() failed");
      }
      peer.infos();
      if (std::strncmp(receive_buffer_ptr.get(), "GET / ", 6) == 0) {
        peer.sendIndexHtml();
      }
      else if (std::strncmp(receive_buffer_ptr.get(), "GET /events ", 12) == 0) {
        peer.sendEventStream();
      }
      else if (std::strncmp(receive_buffer_ptr.get(), "GET /icons8-wifi-32.png", 23) == 0) {
        peer.sendWiFiIconPng();
      }
      else if (std::strncmp(receive_buffer_ptr.get(), "GET /icons8-gears-50.png", 24) == 0) {
        peer.sendThreadsIconPng();
      }
      else if (std::strncmp(receive_buffer_ptr.get(), "GET /icons8-memory-48.png", 25) == 0) {
        peer.sendMemoryIconPng();
      }
      else {
        peer.sendError404Html();
      }
      peer.infos();
      while (AppHttpSSE::Client::eSTATUS_COMM_STREAM == peer.getStatus()) {
        peer.infos();
        vTaskDelay(AppHttpSSE::convertToOsTicks(500));
        {
          char event_string[1200] = "";
          AppHttpSSE::listTasks(event_string, sizeof(event_string));
          peer.sendEvent("threads", event_string);
        }
        {
          vTaskDelay(AppHttpSSE::convertToOsTicks(1000));
          char event_string[50] = "";
          AppHttpSSE::listRemainingFreeHeap(event_string, sizeof(event_string));
          peer.sendEvent("memory", event_string);
        }
        if (AppHttpSSE::Client::eSTATUS_COMM_STREAM == peer.getStatus()) {
          vTaskDelay(AppHttpSSE::convertToOsTicks(500));
        }
      }
    }
  }
  catch (const std::runtime_error &error) {
    std::printf("AppHttpSSE::doAcceptService()< %s\n", error.what());
    std::printf("AppHttpSSE::doAcceptService()< errno  <%" PRIi32 ">\n", static_cast<std::int32_t>(errno));
    std::printf("AppHttpSSE::doAcceptService()< socket <%" PRIi32 ">\n", sock);
  }
  peer.close();
  lwip_socket_thread_cleanup();
  STD_PRINTF("AppHttpSSE::doAcceptService()< leaving thread #<%" PRIi32 ">\n", sock)
  vTaskDelete(NULL);
  for (;;);
}

void AppHttpSSE::doListenService(void) noexcept
{
  STD_PRINTF("AppHttpSSE::doListenService()>\n")

  std::setbuf(stdout, nullptr);
  lwip_socket_thread_init();

  try {
    std::int32_t sock;

    if ((sock = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
      throw std::runtime_error("lwip_socket() failed");
    }
    {
      /* Set ifr_name like "MA0". */
      const struct ifreq iface =
      {{this->netif.name[0], this->netif.name[1], static_cast<char>('0' + this->netif.num), '\0', 0, 0}};
      if (0 != lwip_setsockopt(sock, SOL_SOCKET, SO_BINDTODEVICE, &iface, sizeof(iface))) {
        throw std::runtime_error("lwip_setsockopt() failed");
      }
    }
    {
      struct sockaddr_in s_addr_in = {sizeof(s_addr_in), AF_INET, 0, {0}, {0, 0, 0, 0, 0, 0, 0, 0}};

      s_addr_in.sin_port = lwip_htons(AppHttpSSE::serverPort);
      s_addr_in.sin_addr.s_addr = AppHttpSSE::serverIpAddrIn;
      if (0 != lwip_bind(sock, reinterpret_cast<struct sockaddr *>(&s_addr_in), sizeof(s_addr_in))) {
        throw std::runtime_error("lwip_bind() failed");
      }
    }
    if (0 != lwip_listen(sock, AppHttpSSE::WEBSERVER_LISTEN_BACKLOG)) {
      throw std::runtime_error("lwip_listen() failed");
    }

    while (true) {
      struct sockaddr_in s_remote_in = {sizeof(s_remote_in), AF_INET, 0, {0}, {0, 0, 0, 0, 0, 0, 0, 0}};
      std::uint32_t s_remote_in_size = sizeof(s_remote_in);

      std::int32_t connected_sock = lwip_accept(sock, reinterpret_cast<struct sockaddr *>(&s_remote_in), &s_remote_in_size);
      if (0 > connected_sock) {
        throw std::runtime_error("lwip_accept() failed");
      }
      STD_PRINTF("\n accepting %" PRIi32 "\n", connected_sock)

      {
        BaseType_t status = 0;
        const BaseType_t PASS = 1; /* pdPASS */
        char task_name[15];
        const size_t task_name_length = sizeof(task_name);

        std::snprintf(task_name, task_name_length - 1, "HTTP-%04" PRIX32, connected_sock);
        task_name[task_name_length - 1] = '\0';
        status = xTaskCreate(doAcceptService, task_name,
                             AppHttpSSE::WEBSERVER_CHILD_TASK_STACK_SIZE, static_cast<void *>(&connected_sock),
                             AppHttpSSE::WEBSERVER_CHILD_TASK_PRIORITY, NULL);
        if (PASS != status) {
          throw std::runtime_error("xTaskCreate() failed");
        }
      }
    }
  }
  catch (const std::runtime_error &error) {
    std::printf("AppHttpSSE::doListenService()< %s\n", error.what());
#if LWIP_STATS_DISPLAY
    stats_display();
#endif /* LWIP_STATS_DISPLAY && USE_TRACE == 1 */
  }
  lwip_socket_thread_cleanup();
}

void AppHttpSSE::listTasks(char *bufferStringPtr, std::size_t bufferStringSize) noexcept
{
  std::strcat(bufferStringPtr, \
              "Name                    State  Prio  Stack  Num  \n" \
              "------------------------------------------------ \n");
  vTaskListTasks(bufferStringPtr + strlen(bufferStringPtr), bufferStringSize - (2 * std::strlen(bufferStringPtr)));
  std::strcat(bufferStringPtr, \
              "------------------------------------------------ \n" \
              "X:Running B:Blocked R:Ready D:Deleted S:Suspended\n");
  STD_PRINTF("%" PRIu32 "\n", static_cast<std::uint32_t>(strlen(bufferStringPtr)))
}

void AppHttpSSE::listRemainingFreeHeap(char *bufferStringPtr, std::size_t bufferStringSize) noexcept
{
  char free_heap[26];
  const std::size_t free_heap_size = sizeof(free_heap) - 1;
  std::snprintf(free_heap, free_heap_size, "Remaining heap: %08d", xPortGetFreeHeapSize());
  free_heap[free_heap_size] = '\0';
  std::strncat(bufferStringPtr, free_heap, bufferStringSize - 1);
  bufferStringPtr[bufferStringSize - 1] = '\0';
}

char *AppHttpSSE::chop(char *stringPtr) noexcept
{
  char *char_ptr = stringPtr;
  char_ptr += std::strlen(stringPtr) - 1;
  while ((char_ptr != stringPtr) && ((*char_ptr == '\n') || (*char_ptr == '\r'))) {
    *char_ptr = '\0';
    --char_ptr;
  }
  return stringPtr;
}

int32_t AppHttpSSE::encodeHttpEvent(char *outBufferPtr, std::size_t outBufferLength, const char *eventNamePtr,
                                    char *messagePtr) noexcept
{
  static unsigned long id_counter = 0U;

  char *char_write_ptr = outBufferPtr;
  std::uint32_t char_write_left_count = static_cast<uint32_t>(outBufferLength - 1);
  std::uint32_t written;
  std::uint32_t chunked_size;
  char *chunked_size_ptr;
  written = std::snprintf(char_write_ptr, char_write_left_count,
                          "Content-Type:text/event-stream;charset=utf8\r\n" \
                          "Transfer-Encoding: chunked\r\n" \
                          "xxx\r\n" \
                          "event:%s\n" \
                          "id:%12lu\n",
                          eventNamePtr, id_counter++);
  char_write_left_count -= written;
  char_write_ptr += written;
  chunked_size_ptr \
    = outBufferPtr + std::strlen("Content-Type:text/event-stream;charset=utf8\r\nTransfer-Encoding:chunked\r\n");
  chunked_size = std::strlen("events:") + std::strlen(eventNamePtr) + 1;
  chunked_size += std::strlen("id:") + 12 + 1;

  {
    char *tokenize_worker_ptr = nullptr;
    char *line_ptr;

    AppHttpSSE::chop(messagePtr);
    line_ptr = AppHttpSSE::tokenize(messagePtr, "\n", tokenize_worker_ptr);

    while (nullptr != line_ptr) {
      AppHttpSSE::chop(line_ptr);
      STD_PRINTF("*** %s\n", line_ptr)
      written = std::snprintf(char_write_ptr, char_write_left_count, "data:%s\n", line_ptr); /* "<br>\n" */
      char_write_left_count -= written;
      char_write_ptr += written;
      chunked_size += written;
      line_ptr = AppHttpSSE::tokenize(nullptr, "\n", tokenize_worker_ptr);
    }
    written = std::snprintf(char_write_ptr, char_write_left_count, "%s", "\n\n\r\n");
    chunked_size += written;
    {
      char chunked_size_string[] = {"ssss"};
      std::snprintf(chunked_size_string, 4, "%3" PRIx32 "", chunked_size);
      std::memcpy(chunked_size_ptr, chunked_size_string, 3);
    }
  }
  outBufferPtr[outBufferLength - 1] = '\0';
  return 0;
}

char *AppHttpSSE::tokenize(char *stringPtr, const char *delimiterString, char * &context) noexcept
{
  char *token_begin_ptr;

  if (nullptr != stringPtr) {
    context = stringPtr;
  }
  context += std::strspn(context, delimiterString);
  if ('\0' == *context) {
    return nullptr;
  }

  {
    token_begin_ptr = context;
    context += std::strcspn(context, delimiterString);
    if ('\0' != *context) {
      *context++ = '\0';
    }
  }
  return token_begin_ptr;
}

AppHttpSSE::Client::ClientStatus AppHttpSSE::Client::getStatus(void) noexcept
{
  return this->status;
}

std::int32_t AppHttpSSE::Client::sendEvent(const char *eventNamePtr, char *bufferStringPtr) noexcept
{
  if (std::strlen(bufferStringPtr) == 0) {
    return 1;
  }
  if (this->status == AppHttpSSE::Client::eSTATUS_COMM_STREAM) {
    char send_outbuffer[1200];

    this->message++;
    STD_PRINTF(" ->Send to %s <%" PRIi32 ">\n", this->info, this->sock)
    AppHttpSSE::encodeHttpEvent(send_outbuffer, sizeof(send_outbuffer), eventNamePtr, bufferStringPtr);

    if (this->send(send_outbuffer, strlen(send_outbuffer))) {
      if (this->err) {
        STD_PRINTF("Close client which signed error at send:\n")
        this->close();
      }
    }
  }
  return 0;
}

std::int32_t AppHttpSSE::Client::send(const char *bufferPtr, std::size_t bufferSize) noexcept
{
  const ssize_t to_send = static_cast<ssize_t>(bufferSize);

  STD_PRINTF("[%" PRIi32 "] *****%s*****\n", this->sock, bufferPtr)

  if (this->err) {
    return 1;
  }
  if (to_send != lwip_send(this->sock, bufferPtr, bufferSize, 0)) {
    this->err = 1;
    STD_PRINTF("[%" PRIi32 "] ***** ERROR *****\n", this->sock)
    return 1;
  }
  return 0;
}

void AppHttpSSE::Client::setInfo(std::uint32_t address, std::uint16_t port) noexcept
{
  const std::uint8_t peer_addr[4] = {
    static_cast<std::uint8_t>(address), static_cast<std::uint8_t>(address >> 8),
    static_cast<std::uint8_t>(address >> 16), static_cast<std::uint8_t>(address >> 24)
  };
  const std::uint16_t peer_port = ntohs(port);

  std::snprintf(this->info, sizeof(this->info) - 1,
                "%02" PRIu32 ".%02" PRIu32 ".%02" PRIu32 ".%02" PRIu32 ":%5" PRIu32 "",
                static_cast<std::uint32_t>(peer_addr[0]), static_cast<std::uint32_t>(peer_addr[1]),
                static_cast<std::uint32_t>(peer_addr[2]), static_cast<std::uint32_t>(peer_addr[3]),
                static_cast<std::uint32_t>(peer_port));
  this->info[sizeof(this->info) - 1] = '\0';
}

void AppHttpSSE::Client::infos() const noexcept
{
#if defined(ENABLE_DEBUG)
  static const char *client_status_strings[5] = { "UNK", "NEW", "COMM", "SSE", "END" };
  std::printf("#<%" PRIi32 "> info: %s S: %s Err: %d Messages: %" PRIi32 "\n",
              this->sock, this->info, client_status_strings[this->status],
              this->err, this->message);
#endif /* ENABLE_DEBUG */
}

void AppHttpSSE::Client::close(void) noexcept
{
  static_cast<void>(lwip_shutdown(this->sock, SHUT_RDWR));
  static_cast<void>(lwip_close(this->sock));
  this->status = AppHttpSSE::Client::eSTATUS_END;
  STD_PRINTF("!!! Closed connection <%" PRIi32 "> !!!\n", this->sock)
}

void AppHttpSSE::Client::sendIndexHtml(void) noexcept
{
  static const char response_index_html[] = {
    "HTTP/1.1 200 OK\r\n"
    "Server:B-U585I-IOT02A_EMW\r\n"
    "Access-Control-Allow-Origin:*\r\n"
    "Access-Control-Allow-Methods:GET\r\n"
    "Access-Control-Allow-Headers:cache-control,last-event-id,X-Requested-With\r\n"
    "Cache-Control:no-cache\r\n"
    //"Keep-Alive:timeout=30,max=10\r\n"
    "Connection:close\r\n"
    "Content-Length:2212\r\n"
    "Content-Type:text/html;charset=utf8\r\n\r\n"
    /* du -b ./index.html */
    "<!DOCTYPE HTML>"
    "<html>"
    "<head>"
    "<title>Web Server</title>"
    "<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">"
    "<link rel=\"img\" type=\"image/png\" href=\"icons8-wifi-32.png\">"
    "</head>"
    "<style>"
    "html{font-family:Verdana;display:inline-block;text-align:left;}"
    "p{font-size:0.8rem;}"
    "body{margin:5;}"
    ".topnav{overflow:hidden;background-color:#3db836;color:white;font-size:0.9rem;}"
    ".content{padding:16px;}"
    ".threads{background-color:white;box-shadow:2px 2px 12px 1px rgba(80,80,80,.5);font-family:Courier;}"
    ".memory{background-color:white;box-shadow:2px 2px 12px 1px rgba(80,80,80,.5);font-family:Courier;}"
    ".freertos_systems{margin:0 auto;display:grid;grid-gap:1rem;grid-template-rows:repeat(auto-fit,minmax(225px,1fr));}"
    ".reading{font-size:0.5rem;text-align:left;white-space:pre;}"
    ".footer{font-style:italic;font-size:0.3rem;text-align:left;position:relative;bottom:0;}"
    "</style>"
    "<body>"
    "<div class=\"topnav\">"
    "<h2><img src=\"icons8-wifi-32.png\">WEB SERVER (SSE)</h2>"
    "</div>"
    "<div class=\"content\">"
    "<div class=\"freertos_systems\">"
    "<div class=\"threads\">"
    "<p><img src=\"icons8-gears-50.png\"style=\"vertical-align:middle;\">THREADS</p>"
    "<p><span class=\"reading\"><span id=\"threads\">%TREADS%</span></span></p>"
    "</div>"
    "<div class=\"memory\">"
    "<p><img src=\"icons8-memory-48.png\"style=\"vertical-align:middle;\">MEMORY</p>"
    "<p><span class=\"reading\"><span id=\"memory\">%MEMORY%</span></span></p>"
    "</div>"
    "</div>"
    "</div>"
    "<div class=\"footer\"><p>Cyril FENARD, 2025</p></div>"
    "<script>"
    "if(!!window.EventSource){"
    "var source=new EventSource('/events');"
    "source.addEventListener('open',function(e){"
    "console.log(\"Events Connected\");"
    "},false);"
    "source.addEventListener('error',function(e){"
    "if(e.target.readyState!=EventSource.OPEN){"
    "console.log(\"Events Disconnected\");"
    "}"
    "},false);"
    "source.addEventListener('message',function(e){"
    "console.log(\"message\",e.data);"
    "},false);"
    "source.addEventListener('threads',function(e){"
    "console.log(\"threads\",e.data);"
    "document.getElementById(\"threads\").innerHTML=e.data;"
    "},false);"
    "source.addEventListener('memory',function(e){"
    "console.log(\"memory\",e.data);"
    "document.getElementById(\"memory\").innerHTML=e.data;"
    "},false);"
    "}"
    "</script>"
    "</body>"
    "</html>"
  };
  if (this->send(response_index_html, sizeof(response_index_html))) {
    this->status = AppHttpSSE::Client::eSTATUS_END;
  }
}

void AppHttpSSE::Client::sendEventStream(void) noexcept
{
  static const char response_event_stream[] = {
    "HTTP/1.1 200 OK\r\n"
    "Server:B-U585I-IOT02A_EMW\r\n"
    "Access-Control-Allow-Origin:*\r\n"
    "Access-Control-Allow-Methods:GET\r\n"
    //"Access-Control-Allow-Headers:cache-control,last-event-id,X-Requested-With\r\n"
    "Cache-Control:no-cache\r\n"
    //"Keep-Alive: timeout=30, max=10\r\n"
    "Connection:Keep-Alive\r\n"
    "Content-Type:text/event-stream\r\n\r\n"
  };

  if (0 == this->send(response_event_stream, strlen(response_event_stream))) {
    this->status = AppHttpSSE::Client::eSTATUS_COMM_STREAM;
  }
}

void AppHttpSSE::Client::sendWiFiIconPng(void) noexcept
{
  static const char response_wifi_icon_png[] = {
    'H', 'T', 'T', 'P', '/', '1', '.', '1', ' ', '2', '0', '0', ' ', 'O', 'K', '\r', '\n',
    'S', 'e', 'r', 'v', 'e', 'r', ':',
    'B', '-', 'U', '5', '8', '5', 'I', '-', 'I', 'O', 'T', '0', '2', 'A', '_', 'E', 'M', 'W', '\r', '\n',
    'C', 'a', 'c', 'h', 'e', '-', 'C', 'o', 'n', 't', 'r', 'o', 'l', ':',
    'n', 'o', '-', 'c', 'a', 'c', 'h', 'e', '\r', '\n',
    'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', ':', 'c', 'l', 'o', 's', 'e', '\r', '\n',
    /* du -b icons8-wifi-32.png */
    /* 857   icons8-wifi-32.png */
    'C', 'o', 'n', 't', 'e', 'n', 't', '-', 'L', 'e', 'n', 'g', 't', 'h', ':', 0x38, 0x35, 0x37, '\r', '\n',
    'C', 'o', 'n', 't', 'e', 'n', 't', '-', 'T', 'y', 'p', 'e', ':',
    'i', 'm', 'a', 'g', 'e', '/', 'p', 'n', 'g', '\r', '\n', '\r', '\n',
    /* hexdump -v -e '16/1 "0x%02x," "\n"' icons8-wifi-32.png */
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x08, 0x06, 0x00, 0x00, 0x00, 0x73, 0x7a, 0x7a,
    0xf4, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 0x00, 0x00, 0x0b,
    0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00, 0x00, 0x03, 0x0b, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c,
    0xed, 0x56, 0x6d, 0x68, 0x4e, 0x71, 0x14, 0xbf, 0x63, 0x93, 0x97, 0x90, 0x97, 0x12, 0x66, 0xbb,
    0xff, 0x73, 0x1f, 0x9b, 0xc6, 0x07, 0xec, 0x83, 0x12, 0x46, 0x44, 0x91, 0x52, 0x4a, 0xc2, 0x27,
    0xdf, 0x28, 0xa2, 0xe4, 0x83, 0x14, 0xca, 0xcb, 0x96, 0x0f, 0x28, 0xdb, 0x97, 0x25, 0x92, 0x4f,
    0x48, 0x4a, 0xc9, 0x9a, 0x3c, 0x9e, 0x73, 0xee, 0xd6, 0xc6, 0x8a, 0x32, 0xcd, 0x6b, 0xec, 0x71,
    0xcf, 0xb9, 0x36, 0xcb, 0x97, 0x45, 0x13, 0xb9, 0xfa, 0x3f, 0xbb, 0xb6, 0xff, 0xf3, 0x8a, 0x35,
    0x5b, 0xb4, 0x5f, 0xdd, 0x4f, 0xf7, 0xfc, 0xcf, 0xef, 0xf7, 0x3f, 0xe7, 0x77, 0xce, 0xbd, 0x96,
    0x35, 0x82, 0x11, 0xfc, 0x2b, 0x98, 0x51, 0xe7, 0x4f, 0xb0, 0x63, 0xbc, 0xce, 0x26, 0x39, 0x00,
    0x28, 0x17, 0x80, 0xf8, 0x3a, 0x90, 0xd4, 0x2b, 0xe4, 0xdb, 0x80, 0x72, 0x05, 0x90, 0x4f, 0x2b,
    0x97, 0xb7, 0xdb, 0xae, 0x57, 0x3a, 0x68, 0xa4, 0x65, 0xad, 0xad, 0x63, 0x74, 0xd2, 0x04, 0x11,
    0x49, 0x0f, 0x90, 0x04, 0xbf, 0xf3, 0x28, 0x94, 0x97, 0x8a, 0xa4, 0x2a, 0xe2, 0x76, 0x38, 0x03,
    0x26, 0x06, 0xe2, 0x7d, 0x80, 0xfc, 0x3e, 0x23, 0x01, 0x49, 0x8f, 0x26, 0x01, 0xe2, 0x26, 0x45,
    0xd2, 0xa0, 0x48, 0x5a, 0x14, 0x72, 0x47, 0x7a, 0x2c, 0x7f, 0x03, 0xe2, 0x6b, 0x7f, 0x54, 0x15,
    0x3b, 0x26, 0x2b, 0x14, 0xc9, 0x8b, 0xa4, 0x44, 0xc8, 0xdf, 0x01, 0x05, 0x15, 0xca, 0xfe, 0x62,
    0xd7, 0x5b, 0x58, 0xde, 0x12, 0x14, 0x64, 0x3a, 0x5b, 0xd8, 0x18, 0x9f, 0x0a, 0x31, 0x7f, 0x03,
    0x20, 0x9f, 0x07, 0x62, 0xdf, 0xa8, 0xc8, 0x17, 0x20, 0x39, 0xa1, 0x2f, 0x96, 0x9d, 0x39, 0x08,
    0xf2, 0x00, 0xe5, 0x48, 0xaf, 0xea, 0xfe, 0x1b, 0x28, 0xe2, 0x8b, 0x11, 0x94, 0xb2, 0x01, 0x56,
    0x71, 0x1b, 0xa0, 0xb4, 0x19, 0xf9, 0x9a, 0x80, 0xb8, 0x28, 0x2d, 0xb8, 0xbc, 0x25, 0x28, 0x48,
    0x18, 0x29, 0xb9, 0x7c, 0xcd, 0x91, 0xfb, 0xde, 0xa2, 0x8c, 0xd9, 0xaf, 0x06, 0xa3, 0x8b, 0xa3,
    0xbe, 0x6d, 0xa3, 0xbf, 0xc4, 0x89, 0x79, 0x4b, 0x75, 0x55, 0x22, 0x4d, 0x5d, 0x93, 0x32, 0x85,
    0x26, 0x72, 0x27, 0xda, 0x29, 0x9f, 0xc3, 0xbc, 0xbe, 0x43, 0xfe, 0xfc, 0xa4, 0x64, 0x0a, 0xe5,
    0x46, 0x4a, 0x8f, 0xcf, 0xa5, 0x96, 0x39, 0x51, 0x5e, 0x94, 0x5d, 0x8a, 0xe4, 0xae, 0x22, 0xee,
    0xce, 0x6c, 0x3e, 0x7e, 0x15, 0x96, 0x7f, 0x59, 0xaa, 0x10, 0x68, 0xf0, 0x17, 0x00, 0xca, 0xb3,
    0xde, 0xfc, 0xdc, 0xd9, 0x27, 0x42, 0xa1, 0x9c, 0x31, 0x7b, 0xad, 0xfb, 0x6c, 0x1e, 0x2c, 0x75,
    0x3f, 0x4c, 0x04, 0x94, 0x93, 0xd9, 0x48, 0xb3, 0x3f, 0xdc, 0xec, 0xb8, 0xfe, 0x2a, 0x33, 0x57,
    0x49, 0x94, 0xa7, 0x03, 0xf2, 0x83, 0x50, 0xc4, 0xeb, 0x79, 0xcd, 0xde, 0x34, 0x2d, 0x60, 0xb7,
    0x22, 0xfe, 0x1a, 0x0a, 0x38, 0x68, 0x1e, 0x50, 0x2e, 0x2f, 0x07, 0xe4, 0xb7, 0xa6, 0xfb, 0x01,
    0xa5, 0x4e, 0x21, 0x1f, 0x52, 0x31, 0xd9, 0xac, 0xc8, 0x5b, 0x03, 0xae, 0xac, 0x57, 0xe4, 0xed,
    0x04, 0xe2, 0x1a, 0x33, 0xd6, 0x78, 0x6a, 0x0b, 0x1b, 0xe3, 0xe3, 0xfa, 0x2a, 0x51, 0xff, 0x71,
    0xb2, 0x42, 0x7e, 0xa2, 0x39, 0x1d, 0xe4, 0x4d, 0xbd, 0x44, 0x3a, 0x11, 0x71, 0x4d, 0x12, 0x39,
    0xca, 0x8e, 0xd0, 0xbd, 0x5a, 0x6d, 0xb7, 0x22, 0x3e, 0xaa, 0x6f, 0x60, 0xe5, 0x42, 0x10, 0xe4,
    0xe9, 0x5c, 0x7a, 0x34, 0x53, 0x5a, 0xf3, 0x30, 0x71, 0xdb, 0x10, 0x76, 0x83, 0x14, 0x03, 0x7a,
    0xab, 0xb3, 0xe6, 0xb1, 0xc9, 0xdf, 0xf2, 0x73, 0x1a, 0x14, 0xf2, 0xbd, 0x48, 0xf4, 0x5d, 0x61,
    0x4e, 0xe2, 0x0c, 0x42, 0x42, 0xbf, 0xf4, 0x2f, 0x2f, 0x94, 0xc7, 0xd9, 0x8c, 0x9a, 0x04, 0x85,
    0x5e, 0x09, 0xa0, 0x7c, 0x0a, 0xc9, 0x2f, 0x55, 0x44, 0x83, 0x7c, 0xf3, 0xfd, 0xdc, 0xc6, 0xf8,
    0x6c, 0x40, 0xde, 0x0b, 0xc4, 0x97, 0xf5, 0x86, 0x04, 0xe2, 0x5b, 0xda, 0xb4, 0x8a, 0xbc, 0x8d,
    0xa9, 0xb1, 0xba, 0x85, 0xa6, 0x77, 0x14, 0xf1, 0x31, 0xeb, 0x57, 0xa8, 0x88, 0x06, 0xf9, 0x40,
    0x5c, 0xad, 0x48, 0x6e, 0x5a, 0x41, 0x30, 0x2a, 0x69, 0x0a, 0x48, 0x6a, 0x93, 0xf7, 0x44, 0xda,
    0x86, 0x8c, 0x03, 0x7a, 0x5b, 0xcd, 0x7c, 0xb6, 0xcb, 0x6b, 0xc3, 0x8d, 0x58, 0x9d, 0x2a, 0x30,
    0x27, 0xcc, 0x31, 0xd4, 0x23, 0xa4, 0x5d, 0x9b, 0xb6, 0x66, 0xf5, 0x92, 0x41, 0x79, 0xa4, 0x50,
    0xba, 0x52, 0xbe, 0x05, 0x67, 0x4d, 0xf1, 0x4e, 0x8c, 0x17, 0x5b, 0x03, 0xc5, 0x1c, 0xb7, 0x7d,
    0x96, 0x42, 0xf1, 0x8c, 0x32, 0x76, 0xea, 0xc5, 0x32, 0xb3, 0x85, 0xc7, 0x9b, 0x71, 0x0e, 0xf9,
    0x2b, 0x81, 0xe4, 0x8e, 0x21, 0xf0, 0xf8, 0x80, 0x49, 0x4d, 0x38, 0x8d, 0xf1, 0x08, 0x90, 0x3c,
    0x0f, 0xc9, 0x9f, 0x6a, 0x0f, 0x58, 0xb9, 0xcc, 0x47, 0x72, 0x38, 0x34, 0x5d, 0x5b, 0x71, 0xf4,
    0xcd, 0x58, 0x6b, 0x30, 0x50, 0x44, 0xed, 0x53, 0xb4, 0x27, 0xb4, 0x41, 0x7f, 0x27, 0xde, 0x41,
    0xde, 0xa3, 0xcf, 0x58, 0x7f, 0x0b, 0x65, 0xfa, 0x3f, 0x81, 0xa4, 0x0a, 0x88, 0x05, 0x50, 0x58,
    0x91, 0x54, 0xe6, 0xfe, 0xd2, 0x0d, 0x32, 0x14, 0x49, 0x65, 0x86, 0x09, 0xa8, 0x1c, 0x32, 0x01,
    0xa0, 0x6f, 0x9e, 0xbe, 0xfb, 0xfd, 0xa1, 0x13, 0x80, 0xc2, 0x19, 0x7e, 0xc3, 0xbc, 0x61, 0x6d,
    0x01, 0xa0, 0x9c, 0x1a, 0x32, 0x01, 0x65, 0xbd, 0x26, 0xac, 0x4c, 0x54, 0x62, 0x38, 0x4c, 0x38,
    0x82, 0xff, 0x0a, 0x3f, 0x00, 0xeb, 0x91, 0x1d, 0x9c, 0xa3, 0x15, 0xb3, 0xc5, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
  };

  if (this->send(response_wifi_icon_png, sizeof(response_wifi_icon_png))) {
    this->status = AppHttpSSE::Client::eSTATUS_END;
  }
}

void AppHttpSSE::Client::sendThreadsIconPng(void) noexcept
{
  static const char response_threads_icon_png[] = {
    'H', 'T', 'T', 'P', '/', '1', '.', '1', ' ', '2', '0', '0', ' ', 'O', 'K', '\r', '\n',
    'S', 'e', 'r', 'v', 'e', 'r', ':',
    'B', '-', 'U', '5', '8', '5', 'I', '-', 'I', 'O', 'T', '0', '2', 'A', '_', 'E', 'M', 'W', '\r', '\n',
    'C', 'a', 'c', 'h', 'e', '-', 'C', 'o', 'n', 't', 'r', 'o', 'l', ':',
    'n', 'o', '-', 'c', 'a', 'c', 'h', 'e', '\r', '\n',
    'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', ':', 'c', 'l', 'o', 's', 'e', '\r', '\n',
    /* du -b icons8-gears-50.png */
    /* 736   icons8-gears-50.png */
    'C', 'o', 'n', 't', 'e', 'n', 't', '-', 'L', 'e', 'n', 'g', 't', 'h', ':', 0x37, 0x33, 0x36, '\r', '\n',
    'C', 'o', 'n', 't', 'e', 'n', 't', '-', 'T', 'y', 'p', 'e', ':',
    'i', 'm', 'a', 'g', 'e', '/', 'p', 'n', 'g', '\r', '\n', '\r', '\n',
    /* hexdump -v -e '16/1 "0x%02x," "\n"' icons8-gears-50.png */
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x32, 0x08, 0x06, 0x00, 0x00, 0x00, 0x1e, 0x3f, 0x88,
    0xb1, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 0x00, 0x00, 0x0b,
    0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00, 0x00, 0x02, 0x92, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c,
    0xed, 0x5a, 0xdd, 0x4a, 0x1b, 0x41, 0x14, 0x3e, 0x98, 0x99, 0xad, 0x5e, 0x54, 0x69, 0x7b, 0x53,
    0x5b, 0xe8, 0x8d, 0xd8, 0x1b, 0xfb, 0x1e, 0x6d, 0xe9, 0x8d, 0x50, 0xda, 0x47, 0xa8, 0x2f, 0xe0,
    0xcf, 0x65, 0x1f, 0xa0, 0x7d, 0x0d, 0xbd, 0x08, 0x64, 0xcf, 0xa4, 0x11, 0xdf, 0x44, 0x90, 0x0a,
    0x5e, 0x58, 0xf0, 0xa2, 0x57, 0x2a, 0x26, 0xee, 0xcc, 0x82, 0x53, 0x4e, 0x55, 0x22, 0x49, 0x76,
    0x76, 0x93, 0xcc, 0x5f, 0xb6, 0xfd, 0xe0, 0x40, 0xd8, 0x9d, 0x19, 0xe6, 0xcb, 0xf9, 0x99, 0xf9,
    0x0e, 0x0b, 0xf0, 0x1f, 0xff, 0x28, 0xf2, 0xb4, 0xf1, 0x5e, 0x22, 0xef, 0x2a, 0xc1, 0x35, 0x19,
    0xfd, 0xce, 0xdb, 0x8d, 0x77, 0x30, 0x6b, 0x50, 0x82, 0xed, 0xdd, 0x93, 0xe8, 0x1b, 0xdb, 0x85,
    0x59, 0x81, 0xfe, 0x0a, 0x73, 0xb9, 0x68, 0x7c, 0x90, 0x82, 0xff, 0x1e, 0x24, 0x42, 0xcf, 0xe8,
    0x1d, 0x8d, 0x81, 0xd8, 0xc3, 0x49, 0x21, 0x3b, 0x1e, 0xf6, 0xc4, 0x80, 0x21, 0x3b, 0x8e, 0x2a,
    0xcc, 0x14, 0xb2, 0x0d, 0x89, 0x7c, 0x5f, 0x21, 0xdb, 0x91, 0x82, 0x7f, 0x97, 0xc8, 0x6f, 0x4a,
    0x49, 0xf4, 0x73, 0xe6, 0x86, 0xe6, 0xfc, 0x9d, 0x7b, 0xbb, 0xc6, 0x46, 0x10, 0x12, 0xd7, 0xe9,
    0xa3, 0x15, 0x89, 0x3c, 0xab, 0xba, 0xf1, 0x52, 0x62, 0x82, 0xcb, 0x2c, 0x4d, 0x5e, 0x7b, 0x27,
    0xa2, 0x90, 0xb5, 0x6d, 0x91, 0x50, 0xfd, 0x90, 0x13, 0x5e, 0x49, 0xc8, 0x16, 0x7f, 0x63, 0x9d,
    0x84, 0xb8, 0xf3, 0x4c, 0x9b, 0xaf, 0x79, 0x23, 0xa2, 0x9b, 0xb0, 0xa4, 0x90, 0x9d, 0x38, 0xf0,
    0xc8, 0x09, 0xad, 0x0d, 0x3e, 0xd1, 0xfb, 0x31, 0xff, 0x4a, 0x0a, 0x7e, 0x66, 0x48, 0xe6, 0x4c,
    0x21, 0xdb, 0xd4, 0x2d, 0x58, 0x26, 0x53, 0x82, 0x6d, 0x99, 0x72, 0x4a, 0x0a, 0x7e, 0x46, 0x6b,
    0x42, 0x08, 0x28, 0x64, 0x87, 0x86, 0x7f, 0x77, 0x73, 0xc4, 0xf8, 0x6d, 0xc3, 0xf8, 0x43, 0x08,
    0x05, 0x89, 0xfc, 0xb2, 0x68, 0x63, 0x7a, 0x1f, 0x9e, 0x0f, 0x8e, 0xa7, 0x67, 0x06, 0x0f, 0x5e,
    0x86, 0x24, 0x72, 0x51, 0x48, 0xa4, 0x05, 0xcb, 0x83, 0xe3, 0xbb, 0x9d, 0x85, 0x97, 0x86, 0xd0,
    0x3a, 0x0f, 0xc3, 0xa2, 0x2c, 0xb4, 0x04, 0xdb, 0x1a, 0x31, 0x7e, 0x27, 0xba, 0xd0, 0xea, 0x55,
    0x4b, 0xf6, 0xed, 0xae, 0x58, 0x78, 0x41, 0x76, 0x77, 0xfa, 0xcb, 0xa8, 0x92, 0x5d, 0xd7, 0xa5,
    0xfc, 0xca, 0xba, 0x1c, 0x88, 0x04, 0xba, 0x4e, 0xd8, 0x27, 0xc2, 0x10, 0x7c, 0x2b, 0xbc, 0xac,
    0x93, 0xac, 0x9a, 0x62, 0x7e, 0xa2, 0x4b, 0x63, 0x27, 0x59, 0xf5, 0xa5, 0xf0, 0xf6, 0x2c, 0x5f,
    0xe3, 0xbf, 0xf5, 0xaf, 0xf1, 0xfc, 0x4b, 0x34, 0x0a, 0x8f, 0x3c, 0x56, 0x51, 0x58, 0xfd, 0xcc,
    0xb1, 0xf1, 0xd6, 0xea, 0xc6, 0x6d, 0x2b, 0xbc, 0x20, 0x52, 0x57, 0x39, 0x54, 0x78, 0x55, 0x42,
    0xd3, 0x0a, 0x5c, 0x27, 0x2b, 0x79, 0x4c, 0x22, 0xbf, 0x7a, 0x40, 0xfc, 0xea, 0xde, 0x8b, 0x56,
    0x5b, 0x45, 0x2a, 0xa0, 0xc2, 0xb3, 0xd6, 0x2a, 0x92, 0x81, 0x0e, 0x34, 0xeb, 0xf9, 0xa3, 0x03,
    0x5c, 0x31, 0x9c, 0xb5, 0x8a, 0x7a, 0x8e, 0x15, 0x9e, 0xd7, 0x56, 0x91, 0x72, 0xa4, 0xf0, 0xbc,
    0x9f, 0xfa, 0xd2, 0x91, 0xc2, 0xf3, 0x5e, 0x48, 0xe4, 0xb8, 0x0a, 0x8f, 0x74, 0x45, 0x31, 0x91,
    0x8b, 0x60, 0x85, 0x44, 0x39, 0x50, 0x78, 0xd5, 0x0a, 0x09, 0x3b, 0xcd, 0x30, 0xf9, 0xa8, 0x05,
    0x3c, 0x26, 0xcb, 0x30, 0x59, 0x57, 0xc8, 0x8e, 0x26, 0x2a, 0x24, 0x2e, 0x15, 0x9e, 0x79, 0x6d,
    0x76, 0xaa, 0x9b, 0xf0, 0x74, 0x44, 0xd8, 0x3e, 0xa1, 0x77, 0x65, 0x6b, 0x7b, 0x2f, 0xbf, 0x45,
    0xde, 0x26, 0x4f, 0x14, 0x86, 0x7a, 0x3b, 0xf9, 0x64, 0xf2, 0xf6, 0xf0, 0x04, 0x0f, 0x71, 0x5c,
    0x94, 0x7f, 0x14, 0x4a, 0x45, 0x44, 0xf4, 0x01, 0x2c, 0x9a, 0xf2, 0xcf, 0x9f, 0xc2, 0x7b, 0x50,
    0x59, 0x26, 0x22, 0xd2, 0x84, 0xa5, 0xb1, 0x89, 0xb8, 0xae, 0xf5, 0x86, 0xd0, 0x5a, 0x2f, 0xda,
    0x93, 0x4c, 0xf9, 0xe7, 0xb1, 0x42, 0xcb, 0xb5, 0xc2, 0x33, 0x26, 0x3b, 0xb2, 0x23, 0x4a, 0xec,
    0x21, 0x6f, 0xa4, 0xf0, 0x4c, 0x09, 0xf6, 0xcb, 0x4a, 0xab, 0xc8, 0x86, 0xc2, 0xab, 0x5a, 0x7e,
    0x29, 0xb1, 0xf5, 0x01, 0x2c, 0x92, 0xdd, 0x7a, 0x62, 0x34, 0x89, 0x89, 0x5b, 0x45, 0xd3, 0xde,
    0x50, 0xa3, 0x6b, 0x15, 0xa9, 0x29, 0x34, 0x43, 0x54, 0xad, 0xa2, 0xdc, 0xa0, 0xf0, 0xca, 0x30,
    0x33, 0xad, 0xa2, 0x2a, 0x88, 0xba, 0x55, 0x34, 0x0d, 0xa2, 0x69, 0x15, 0xd9, 0x40, 0x2d, 0xbe,
    0x8a, 0xa8, 0xd5, 0x77, 0x2a, 0x36, 0x0a, 0x09, 0xd4, 0x0d, 0x7f, 0x00, 0x27, 0x4d, 0xc2, 0x07,
    0xab, 0xd5, 0x9e, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
  };

  if (this->send(response_threads_icon_png, sizeof(response_threads_icon_png))) {
    this->status = AppHttpSSE::Client::eSTATUS_END;
  }
}

void AppHttpSSE::Client::sendMemoryIconPng(void) noexcept
{
  static const char response_memory_icon_png[] = {
    'H', 'T', 'T', 'P', '/', '1', '.', '1', ' ', '2', '0', '0', ' ', 'O', 'K', '\r', '\n',
    'S', 'e', 'r', 'v', 'e', 'r', ':',
    'B', '-', 'U', '5', '8', '5', 'I', '-', 'I', 'O', 'T', '0', '2', 'A', '_', 'E', 'M', 'W', '\r', '\n',
    'C', 'a', 'c', 'h', 'e', '-', 'C', 'o', 'n', 't', 'r', 'o', 'l', ':',
    'n', 'o', '-', 'c', 'a', 'c', 'h', 'e', '\r', '\n',
    'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', ':', 'c', 'l', 'o', 's', 'e', '\r', '\n',
    /* du -b icons8-memory-48.png */
    /* 382   icons8-memory-48.png */
    'C', 'o', 'n', 't', 'e', 'n', 't', '-', 'L', 'e', 'n', 'g', 't', 'h', ':', 0x33, 0x38, 0x32, '\r', '\n',
    'C', 'o', 'n', 't', 'e', 'n', 't', '-', 'T', 'y', 'p', 'e', ':',
    'i', 'm', 'a', 'g', 'e', '/', 'p', 'n', 'g', '\r', '\n', '\r', '\n',
    /* hexdump -v -e '16/1 "0x%02x," "\n"' icons8-memory-48.png */
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
    0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x30, 0x08, 0x06, 0x00, 0x00, 0x00, 0x57, 0x02, 0xf9,
    0x87, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 0x00, 0x00, 0x0b,
    0x13, 0x01, 0x00, 0x9a, 0x9c, 0x18, 0x00, 0x00, 0x01, 0x30, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c,
    0xed, 0x96, 0xc1, 0x4a, 0xc3, 0x40, 0x10, 0x86, 0xf7, 0x22, 0x3e, 0x43, 0xb1, 0x3e, 0x45, 0xcf,
    0x65, 0x46, 0x4f, 0xc1, 0xbb, 0x33, 0x85, 0xdc, 0x3d, 0x08, 0xfa, 0x74, 0x12, 0x2f, 0x85, 0x99,
    0x1e, 0x2a, 0x0a, 0x39, 0xf4, 0x19, 0xf4, 0x0d, 0x5a, 0xef, 0x91, 0x54, 0x84, 0x58, 0x42, 0x1a,
    0xbb, 0x24, 0xbb, 0x2b, 0xf3, 0xc1, 0x9c, 0x7e, 0xb2, 0x99, 0x6f, 0x77, 0x12, 0xd6, 0x39, 0xc3,
    0x30, 0x7a, 0x71, 0xa5, 0x74, 0x83, 0x4a, 0x1f, 0xa8, 0x5c, 0xd5, 0x35, 0x76, 0xee, 0x4d, 0x73,
    0xf1, 0xb6, 0x17, 0x0c, 0x9d, 0x7b, 0xd3, 0x5c, 0xbc, 0xbd, 0x81, 0x61, 0x73, 0x6f, 0x4c, 0x40,
    0x03, 0x9f, 0x80, 0x61, 0xfc, 0x91, 0xac, 0xc8, 0xce, 0x41, 0xe8, 0x01, 0x94, 0x5e, 0x41, 0xe9,
    0xf3, 0x70, 0x46, 0x43, 0x95, 0xeb, 0xc3, 0xf5, 0xf2, 0xf6, 0x02, 0x94, 0x37, 0xa1, 0x9b, 0xc5,
    0x53, 0x04, 0xf6, 0x3b, 0x1f, 0x69, 0xf3, 0xd8, 0x47, 0x00, 0x75, 0xf1, 0x18, 0xba, 0x49, 0xf4,
    0x11, 0x00, 0xe1, 0xb7, 0xe6, 0x03, 0xa0, 0xf4, 0xb4, 0x1f, 0x29, 0xc9, 0xa7, 0x28, 0x54, 0x44,
    0x2f, 0x80, 0xca, 0xbb, 0x5f, 0x02, 0x92, 0x4f, 0x7f, 0xb2, 0xf9, 0x8a, 0x2f, 0x53, 0x10, 0xa8,
    0xfe, 0x95, 0x00, 0x0a, 0x15, 0xb5, 0xc4, 0x77, 0xf3, 0xf4, 0x9c, 0x9e, 0x80, 0xc6, 0x55, 0xce,
    0x04, 0xd4, 0x4e, 0xa0, 0xb2, 0x11, 0xea, 0x22, 0xf4, 0x88, 0xa0, 0x7d, 0xc4, 0x1a, 0x7e, 0x97,
    0x31, 0xe5, 0xdf, 0x28, 0x1c, 0xb9, 0x7b, 0xc5, 0x2f, 0x20, 0xdd, 0x57, 0x97, 0xb4, 0x05, 0x84,
    0xb7, 0xd1, 0x0b, 0x60, 0xd7, 0xdd, 0x4b, 0xf8, 0x25, 0x7e, 0x01, 0xed, 0x2a, 0xba, 0x4f, 0x56,
    0x00, 0x94, 0xcb, 0x59, 0x79, 0x77, 0x96, 0xa4, 0x00, 0x28, 0x97, 0xf3, 0x55, 0x3e, 0x39, 0xda,
    0x7c, 0x64, 0x02, 0x3b, 0x10, 0x5a, 0xd7, 0x63, 0xd3, 0x6b, 0xe7, 0x0d, 0x63, 0x60, 0x0e, 0x67,
    0x74, 0xec, 0xdc, 0x1b, 0x13, 0xd0, 0x98, 0x4e, 0x40, 0xe8, 0x7d, 0xec, 0xdc, 0x9b, 0xe6, 0xe2,
    0x20, 0x8b, 0x6c, 0xec, 0xdc, 0x30, 0x0c, 0xd7, 0xca, 0x17, 0x8b, 0xa1, 0xf6, 0x0e, 0x71, 0x84,
    0x3a, 0x31, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
  };

  if (this->send(response_memory_icon_png, sizeof(response_memory_icon_png))) {
    this->status = AppHttpSSE::Client::eSTATUS_END;
  }
}

void AppHttpSSE::Client::sendError404Html(void) noexcept
{
  static const char response_error_404_html[] = {
    "HTTP/1.1 404\r\n"
    "Server:B-U585I-IOT02A_EMW\r\n"
    "Connection:close\r\n"
    "Content-Length:334\r\n"
    "Content-Type:text/html;charset=utf8;\r\n\r\n"
    "<!DOCTYPE HTML>"
    "<html>"
    "<head>"
    "<title>Web Server</title>"
    "<link rel=\"icon\" type=\"image/png\" href=\"icons8-wifi-32.png\">"
    "</head>"
    "<style>"
    "html{font-family:Verdana;display:inline-block;text-align:center;}"
    "</style>"
    "<body style=color:red; background-color:white;>"
    "<h1>WEB SERVER (SSE)</h1>"
    "<p>Error 404<br>File Not Found</p>"
    "</body>"
    "</html>"
  };
  this->send(response_error_404_html, sizeof(response_error_404_html));
  this->status = AppHttpSSE::Client::eSTATUS_END;
}

std::uint32_t AppHttpSSE::serverIpAddrIn = 0U;
std::uint16_t AppHttpSSE::serverPort = 0U;
